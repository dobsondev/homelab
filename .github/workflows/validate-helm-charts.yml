name: Validate Helm Charts

on:
  pull_request:
    paths:
      - 'argocd/apps/**'
  push:
    branches:
      - main

jobs:
  validate-helm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Extract and validate charts
        run: |
          for app in argocd/apps/*.yaml argocd/apps/*.yml; do
            [ -f "$app" ] || continue
            echo "Validating $app"

            # Extract chart details using yq
            CHART=$(yq eval '.spec.source.chart' "$app")
            REPO=$(yq eval '.spec.source.repoURL' "$app")
            VERSION=$(yq eval '.spec.source.targetRevision' "$app")

            if [ "$CHART" != "null" ]; then
              # Create temp values file
              yq eval '.spec.source.helm.values' "$app" > /tmp/values.yaml

              # Template the chart
              echo "Running helm template for $CHART version $VERSION"
              helm template test-release "$CHART" \
                --repo "$REPO" \
                --version "$VERSION" \
                --values /tmp/values.yaml \
                --namespace monitoring \
                --kube-version 1.33 \
                --include-crds
            fi
          done

      - name: Install kubeconform
        run: |
          curl -sSLo kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/v0.6.4/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform.tar.gz
          sudo mv kubeconform /usr/local/bin/

      - name: Validate Kubernetes manifests
        run: |
          for app in argocd/apps/*.yaml argocd/apps/*.yml; do
            [ -f "$app" ] || continue

            CHART=$(yq eval '.spec.source.chart' "$app")
            REPO=$(yq eval '.spec.source.repoURL' "$app")
            VERSION=$(yq eval '.spec.source.targetRevision' "$app")

            if [ "$CHART" != "null" ]; then
              yq eval '.spec.source.helm.values' "$app" > /tmp/values.yaml

              echo "Validating manifests for $CHART"
              helm template test-release "$CHART" \
                --repo "$REPO" \
                --version "$VERSION" \
                --values /tmp/values.yaml \
                --namespace monitoring \
                --include-crds | \
                kubeconform -strict -summary -kubernetes-version 1.33.0
            fi
          done